use crate::{board::Board, logic_result::LogicResult, logical_step_desc::LogicalStepDescList};

/// [`LogicalStep`] is a trait that defines the logic of a single logical step.
///
/// For example, this might be a naked single, a hidden single, or a naked pair.
/// Each logical elimination concept has its own implementation of this trait.
/// Generally, these logical steps do not interact with constraints other than
/// through the weak links generated by those constraints.
pub trait LogicalStep {
    /// Called once after the board has been created so that any
    /// board-specific initialization can be done.
    fn init(&mut self, board: &Board);

    /// Executes one logical step.
    ///
    /// # Arguments
    /// * `board` - The board to execute the step on.
    /// * `desc` - If provided, describe any eliminations as a single appended entry to this list.
    ///
    /// # Return value
    /// Return the following based on the situation:
    /// - [`LogicResult::None`] if the board is unchanged.
    /// - [`LogicResult::Changed`] if the board is changed.
    /// - [`LogicResult::Invalid`] if this constraint has made the solve impossible.
    /// - [`LogicResult::Complete`] if the board is solved.
    fn step(&mut self, board: &mut Board, desc: Option<&mut LogicalStepDescList>) -> LogicResult;
}
